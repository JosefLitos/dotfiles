#!/usr/bin/bash

LC_ALL=C # improves regex by ~10%
declare -A ACTION_INFO=()
declare -a ACTION_ORDER=()
ALIGNER=8

argToCase() {
	[[ $1 == *-* ]] || { echo "$1" && return 0; }

	local str=${1#*-}
	local ret=${1%%-*}
	local part
	while [[ $str == *-* ]]; do
		part=${str%%-*}
		ret+=${part^}
		str=${str#*-}
	done
	echo "$ret${str^}"
}
caseToArg() {
	[[ $1 == *[A-Z]* ]] || { echo "$1" && return 0; }

	local str=$1
	local ret=''
	while [[ $str =~ ^([a-z0-9]+)([A-Z]+)(.*)$ ]]; do
		ret+=${BASH_REMATCH[1]}-
		((${#BASH_REMATCH[2]} < 2)) && ret+=${BASH_REMATCH[2],} || ret+=${BASH_REMATCH[2]}
		str=${BASH_REMATCH[3]}
	done
	echo "$ret$str"
}

#######################################
# Register fn/action docs and for execution
# Arguments:
#   name: name of the function
#   key?: a unique one-letter shortcut for calling, or '' for no shortcut
#   helpsig?: function name displayed in help (with bracket-highlighted key)
#   help: help text
#######################################
actionInfo() {
	local name=$1 key helpsig help=${!#}
	(($# > 2)) && key=$2 || key=${name::1}
	if (($# > 3)); then
		helpsig=$3
	else
		local converted=$(caseToArg "$name")
		[[ $key ]] && helpsig="[$key]${converted:1}" || helpsig=$converted
	fi
	[[ $key ]] && ACTION_INFO[$key]="$name"
	((ALIGNER < ${#helpsig})) && ALIGNER=${#helpsig}
	ACTION_INFO[$name]="$helpsig $help"
	ACTION_ORDER+=($name)
}

declare -A LOG_LEVELS=([quiet]=0 [error]=1 [warn]=2 [warning]=2 [info]=3 [verbose]=4 [debug]=5)
LOG_NAMES=(quiet error warn info verbose debug)
LOG_COLORS=(0 31 33 32 35 37)

[[ $# == 0 && -t 0 && -t 1 ]]
declare -Ai SCRIPT_OPTS=( # helper + runtime options - changeable by `define` action
	[cli]=$? # user currently runs in CLI
	[tui]=$((1 - $?))
	[dryRun]=0
	[color]=0
	[picker]=0
	[guiPicker]=0
	[optArgPicker]=0
	[exitLogLvl]=$((1 + $?))
	[logLvl]=3
)
[[ -t 0 && -t 1 && -t 2 ]] && SCRIPT_OPTS[picker]=1 SCRIPT_OPTS[color]=1
[[ -t 0 ]] || SCRIPT_OPTS[guiPicker]=1

# TODO: config as toml (action as sections) or bash map <action>ParamDefaults
actionInfo define D 'set script-processing options'
defineParams=( # TODO: consider a builtin action [c]onfig loader (bash script)
	tui 't?' '' 'Enter TUI after CLI is parsed'
	dryRun 'd?' '' 'Disable actual commands execution'
	color 'c?' '' 'Colorize output (default=1 when not redirected)'
	picker 'p?' '' 'Enable picker in CLI (default=1 for TUI, 0 for CLI)'
	guiPicker 'g?' '' 'Use GUI pickers'
	optArgPicker 'o?' '' 'Enable picker for optional arguments'
	exitLogLvl 'e?' '([0-9]+|[A-Za-z]+)?'
	"At which level to abort execution and exit (default=${LOG_NAMES[${SCRIPT_OPTS[exitLogLvl]}]}=${SCRIPT_OPTS[exitLogLvl]})"
	logLvl 'l?' '([0-9]+|[A-Za-z]+)?'
	"Depth of logging, '-lll'='-l3'â†’3 (default=${LOG_NAMES[${SCRIPT_OPTS[logLvl]}]}=${SCRIPT_OPTS[logLvl]})"
	logLvl '$?')
defineParams+=("${defineParams[@]:0-4:2}")
define() {
	declare -i i=0
	local opt
	while [[ -z ${defineParams[i + 2]} ]]; do
		opt=${defineParams[i]}
		((${!opt})) && SCRIPT_OPTS[$opt]=${!opt%-*}
		i+=4
	done
	while [[ ${defineParams[i]} ]]; do
		opt=${defineParams[i]}
		if [[ ${!opt} ]]; then
			if [[ ${!opt} == [A-Za-z]* && -z ${LOG_LEVELS[${!opt,,}]} ]]; then
				[[ $opt == logLvl ]] && SCRIPT_OPTS[$opt]=${LOG_LEVELS[info]} ||
					SCRIPT_OPTS[$opt]=${LOG_LEVELS[warn]}
				log Warn ".$opt - unknown log level '${!opt}', defaulting to '${LOG_NAMES[${SCRIPT_OPTS[$opt]}]}'
  Available are: ${LOG_NAMES[*]}"
			else
				[[ ${!opt} == -* ]] && ((SCRIPT_OPTS[$opt] += ${!opt})) ||
					SCRIPT_OPTS[$opt]=${LOG_LEVELS[${!opt,}]:-${!opt}}
			fi
			unset $opt # to not parse logLvl twice (as opt and as arg)
		fi
		i+=4
	done
	return 0
}

declare -A SSS_OPTS=( # internal behaviour / parsing options - script-specific edge case handling
	[about]=      # script description
	[exitFn]=exit # when all actions were executed; (commit/rollback) - should never return
	# set to main registered action if script is a single command - actions act as builders
	# you can also change other actions' params at runtime â†’ dynamic configuration
	# builder example: --builder init1 --builderOption --builder init2 'default action arg'
	[defAction]=unknown # when no other action matches args, actionInfo register optional
	[defActionRep]=0    # default action can be called multiple times
	[optPrefix]='-{,2}' # regex for required cli long name format
	[argAsLongOpt]=1    # allow arguments to be also parsed as long options
)

#######################################
# Print given message with context of current action and log level
# Arguments:
#   LAST_LOG_LVL: one of ${!LOG_LEVELS[@]}, determines message importance
#   msg: message to print with context, ignored when SCRIPT_OPTS[logLvl]<LAST_LOG_LVL
# Returns:
#   success when message was printed, exits if Warning in cli mode or Error are reported
#######################################
log() {
	LAST_LOG_LVL=${LOG_LEVELS[${1,}]:-$1}
	if ((SCRIPT_OPTS[logLvl] >= LAST_LOG_LVL)); then
		local name=${LOG_NAMES[$LAST_LOG_LVL]^^}
		((${SCRIPT_OPTS[color]})) && name="[${LOG_COLORS[$LAST_LOG_LVL]}m$name[m"
		echo "$name: $ACTION$2" 1>&2
	fi
	((LAST_LOG_LVL > ${SCRIPT_OPTS[exitLogLvl]})) || ${SSS_OPTS[exitFn]} 1
	((SCRIPT_OPTS[logLvl] >= LAST_LOG_LVL))
}

# Supports ... '&' at the end or simple redirection ... '>'/'>>' 'path'
exec() {
	((SCRIPT_OPTS[logLvl] > 3)) && log Verbose " \$> $*"
	((SCRIPT_OPTS[dryRun] > 0)) && return 0
	if [[ ${@:0-2:1} == \>* ]]; then
		if [[ ${@:0-2:1} == \>\> ]]; then
			"${@:1:$#-2}" >> "${!#}"
		else
			"${@:1:$#-2}" > "${!#}"
		fi
	else
		[[ ${!#} == \& ]] && { "${@:1:$#-1}" & } || "$@"
	fi
}

main() {
	if ((SCRIPT_OPTS[cli])); then
		while (($#)); do
			parseAction "$@"
			shift $?
		done
		((SCRIPT_OPTS[tui])) || quit
		SCRIPT_OPTS[cli]=0
	fi

	SCRIPT_OPTS[picker]=1
	while :; do
		if ((SCRIPT_OPTS[optArgPicker])); then
			read -rp 'Choose action (+opts): ' line
		else
			read -rp 'Choose action: ' -n 1 line
			echo
		fi
		if [[ ${line%% *} == ? ]]; then
			parseAction -$line
		else
			local _prefix=
			while [[ ! $_prefix =~ ^${SSS_OPTS[optPrefix]}$ ]]; do
				_prefix+=-
			done
			parseAction $_prefix$line
		fi
		LAST_LOG_LVL=100
	done
}

# set all required variables and call action
parseAction() {
	declare -i argc=$#
	# get action name
	local ACTION=''
	if [[ $1 =~ ^(${SSS_OPTS[optPrefix]})([^-][^=]+)(=.*)?$ ]]; then
		local ACTION=$(argToCase "${BASH_REMATCH[2]}") actionArg=${BASH_REMATCH[3]:1}
		[[ ${ACTION_INFO["$ACTION"]} ]] || ACTION='' actionArg=''
	fi
	if [[ -z $ACTION && $1 =~ ^-([^-])(.*)$ ]]; then
		local ACTION=${ACTION_INFO[${1:1:1}]} actionArg=${BASH_REMATCH[2]:+-${BASH_REMATCH[2]}}
	fi
	if [[ $ACTION ]]; then
		[[ $actionArg ]] && set -- "$actionArg" || shift
	else
		ACTION=${SSS_OPTS[defAction]} actionArg=
	fi

	declare -n sigs=${ACTION}Params
	declare -i sigN=${#sigs[@]}
	((sigN % 4)) && log Error "Params definition is missing $((4 - sigN % 4)) fields" && return
	local i=-4 posArg firstArg # not `declare -i` to keep unset values as ""

	# distinguish options and args
	declare -A opts=() # opt names = identifiers
	while (((i += 4) < sigN)); do
		local sign=${sigs[i + 1]}
		[[ $sign != \$? || ${SSS_OPTS[argAsLongOpt]} ]] && opts["${sigs[$i]}"]=$i
		[[ $sign != [_$]? ]] && opts["${sign::1}"]=$i
		[[ $sign == ?[+!] || $sign == \$? ]] && posArg=${posArg:-$i}
	done
	[[ -z $posArg ]] && posArg=$sigN
	firstArg=$posArg

	declare -n builder=${ACTION}Builder
	[[ ${builder[@]} ]] || declare -A ${ACTION}Builder # ensure we don't index a null
	while [[ $1 ]]; do # get options and args
		# parse option prefix
		[[ $1 == -- && ${#opts[@]} -gt 0 ]] && shift && opts=() && continue # only args will be found
		local i= arg= optCnt=+
		if [[ $1 =~ ^(${SSS_OPTS[optPrefix]})(no-)?([^- ][^= ]+)(=.+)?$ && -z $actionArg ]]; then
			i=${opts["$(argToCase ${BASH_REMATCH[3]})"]} # full option name
			[[ $i ]] && arg=${BASH_REMATCH[4]:1}
			[[ ${BASH_REMATCH[2]} ]] && optCnt=-
		fi
		if [[ !$i && $1 =~ ^[+-]([^-+])(.+)?$ ]]; then # short option -o(Val)?
			[[ $1 == +* ]] && optCnt=-                    # +o means toggle off â†’ -=
			i=${opts["${BASH_REMATCH[1]}"]}
			arg=${BASH_REMATCH[2]}
			if [[ $i ]]; then
				while [[ $i && $arg ]]; do # -oooo toggle opts in succession
					local reg=${sigs[i + 2]}
					if [[ $reg ]]; then # opt arg (last) or no arg required
						[[ '' =~ ^$reg$ ]] && ! argMatch "${arg:-$2}" || break
					fi
					declare -i ${sigs[$i]//-/_}+=${optCnt}1 # preserve amount of that no-arg option's use
					i=${opts[${arg::1}]}
					[[ $i ]] && arg=${arg:1}
				done
				[[ -z $i && -z $arg ]] && shift && continue
				[[ -z $i ]] && log Error " - Unknown option '${arg::1}' in chunk '$1'" && return
			fi
		fi

		if [[ $i ]]; then # set option / named parameter
			shift
			local varName=${sigs[$i]//-/_} reg=${sigs[i + 2]}
			if [[ $reg ]]; then # requires arg
				if [[ $arg || $1 ]] && argMatch "${arg:-$1}"; then
					declare -a $varName
					declare -n varName
					varName+=("${arg:-$1}")
					declare +n varName
					[[ $arg ]] || shift
				elif [[ -z $arg && '' =~ ^$reg$ ]]; then # no arg, allows '' â†’ number of uses as value
					declare -i $varName+=${optCnt}1
				else
					if ((SCRIPT_OPTS[picker])) && [[ -z $arg && ${sigs[i + 1]} != ?[+!] ]]; then
						declare -a $varName # picker for options
						${builder[$varName]:-pickAny} "${sigs[@]:i:4}"
						log Debug "/opt.$varName <${builder[$varName]:-pickAny}>= '${!varName}'"
					fi

					[[ -z ${!varName} ]] && log Error " - Argument expected, got '${arg:-$1}':
$(paramHelp $ACTION $((i / 4)))" && return
				fi
			else
				if [[ $arg ]]; then
					log Error " - Unexpected argument '$arg':
$(paramHelp $ACTION $((i / 4)))" && return
				else
					declare -i $varName+=${optCnt}1
				fi
			fi
			log Debug "/opt.$varName = '${!varName}'"
			if [[ ${sigs[i + 1]} == \$? ]]; then
				((i < posArg)) && log Warn " - Breaking order of arguments: ${sigs[$i]} < ${sigs[$posArg]}"
				posArg=$i
			fi
		else # set arg
			((posArg < sigN)) || break
			[[ $actionArg && $1 ]] && set -- "${1#-}"
			while ((posArg < sigN)); do
				local varName=${sigs[$posArg]} sign=${sigs[posArg + 1]} reg=${sigs[posArg + 2]}
				if [[ $sign == \$? && $# -gt 0 ]] && argMatch "$1"; then
					if [[ $sign == ?[+*] ]]; then # param is a list
						declare -a $varName
						declare -n varName
						varName+=("$1")
						declare +n varName
					else # single argument expected
						declare $varName="$1"
						((posArg += 4))
					fi
					shift
					log Debug "/arg.$varName = '${!varName}'"
					break # continue in parsing cli
				else
					((posArg += 4)) # given value doesn't match â†’ try next arg
				fi
			done
		fi
	done

	# verify all required arguments are set + pick args where allowed and needed
	i=firstArg-4
	while (((i += 4) < sigN)); do
		local varName=${sigs[$i]} sign=${sigs[i + 1]} reg=${sigs[i + 2]}
		[[ $sign == [^$][?*] ]] && continue # opt definition between params
		if [[ ! ${!varName} ]]; then
			if ((SCRIPT_OPTS[picker])); then # picker for optional args || arg required
				if ((SCRIPT_OPTS[optArgPicker])) || [[ $sign == ?[+!] ]]; then
					declare -a $varName # prepare variable as local
					${builder[$varName]:-pickAny} "${sigs[@]:i:4}"
					log Debug "/opt.$varName <${builder[$varName]:-pickAny}>= '${!varName}'"
				fi
			fi
			[[ ! ${!varName} && ${sign:0-1} == [+!] ]] && log Error " - Argument expected:
$(paramHelp $ACTION $((i / 4)))" && return
		fi
	done

	declare +n builder
	unset opts arg posArg firstArg args builder varName sign reg

	# ensure valid state
	if [[ $ACTION == "${SSS_OPTS[defAction]}" &&
		$# -gt 0 && ! ${SSS_OPTS[defActionRep]} ]]; then
		log Error " - Default action must be used last, but was followed by: $*"
	fi
	[[ $actionArg && $# -eq 1 ]] && log Error " - Unexpected argument '$actionArg'" && return

	# cleanup and action call
	declare +n sigs
	unset sigs i sigN
	$ACTION || log Warn ' failed!'
	[[ $actionArg ]] && return 1 || return $((argc - $#))
}

call() { # for script usage - calling actions like itself with cli, without external process
	parseAction "$@"
	(($? == $# && LAST_LOG_LVL > 2))
}

declare -A REGEX=(
	[var]='[0-9A-Za-z_]+' [dashvar]='[0-9A-Za-z_\-]+' [const]='[0-9A-Z_]+'
	[domain]='[a-z0-9]+\.[0-9a-z.]+'
)

#######################################
# Test if $reg matches $1, or the rest after parsing $reg == \$o.*; o = bash condexpr operator
# example: reg='$f\.txt' â†’ matches any existing file with 'txt' extension, '$F' for just filename
# Arguments:
#   tested: input argument to be tested against the pattern
#   reg: required format of the argument
#######################################
argMatch() {
	local reg=${reg:-$2}
	if [[ $reg == '$'* ]]; then
		if [[ ${reg:1:1} == [Ee] ]]; then # any dir or file with given pattern
			[[ -d $1 ]] && return 0
			[[ ${reg:1:1} == e ]] && reg="\$f${reg:2}" || reg="\$F${reg:2}"
		fi
		[[ $1 =~ ^[^-][^=]*${reg:2}$ ]] && {
			if [[ ${reg:1:1} == F ]]; then
				[[ ! -d $1 ]]
			else
				eval [[ -${reg:1:1} \$1 ]]
			fi
		}
	else
		[[ $1 =~ ^$reg$ ]]
	fi
}

#######################################
# Print help about specified parameter from given action.
# Globals:
#   matcher: boolean show regex used for matching args
# Arguments:
#   action: string
#   paramIdx?: integer
#######################################
paramHelp() {
	local action=$1 fmt
	declare -n name=${action}Params
	[[ $2 ]] && declare -i i=$2*4 end=i+4 || declare -i i=0 end=${#name[@]}
	declare -a sig desc
	declare -i maxLen=$ALIGNER
	i+=-4
	while (((i += 4) < end)); do
		local varName=$(caseToArg ${name[$i]})
		local sign=${name[i + 1]} regex=${name[i + 2]} help=${name[i + 3]}
		if [[ $sign == [^$][?*!+] ]]; then # option/non-positional arg
			[[ $sign == _? ]] && varName=[]$varName || varName="[${sign::1}]$varName"
			sign=${sign:1}
			[[ $regex ]] && sign+='<>' # no regex â†’ toggle option
		else
			sign=${sign:1} # positional param
		fi
		sign="$varName$sign"
		sig+=("$sign")
		((maxLen < ${#sign})) && maxLen=${#sign}

		[[ $matcher -gt 0 && $regex ]] && help="/$regex/ $help"
		desc+=("$help")
	done
	((${SCRIPT_OPTS[color]})) && fmt='\033[1m%-*s\033[0m   %s' || fmt='%-*s   %s'
	i=-1
	while ((++i < ${#sig[@]})); do
		printf "     $fmt\n" $maxLen "${sig[$i]}" "${desc[$i]}"
	done
}

actionInfo help 'display this help'
ACTION_INFO['?']=help
helpParams=(
	legend 'l?' '' 'Enable legend for param notation'
	matcher 'm?' '' 'Enable regex matching argument'
	params 'p?' '' 'Toggle params=opt+arg display (default=true for lower action count)'
	action '$*' '.+' 'Display help for (default=all)')
declare -A helpBuilder=([actions]=pickHelpAction)
pickHelpAction() {
	declare -n arr=$1
	arr=($(printf '%s\n' "${ACTION_ORDER[@]}" | fzf -m --prompt="$4: "))
}
help() {
	if [[ ! $action ]]; then
		declare -n action=ACTION_ORDER
		local default=true
		((SCRIPT_OPTS[cli])) && echo "${SSS_OPTS[about]}"
	fi
	((legend > 0)) && echo 'Legend:
  action: [a]ction
    - short name: in brackets if exists
      - in CLI prefix with `-`, not necessary in TUI
      - value immediately after or as the next arg (-aVal / -a val)
    - full name usage: better option separation from next action
      - prefix must match /'"${SSS_OPTS[optPrefix]}"'/
      - value given with `=` or as the next arg (--act=val / --act val)
    - orderless (aside of repeated uses)
  options/named params: [o]option + suffix + type suffix
    - short names can be chained with argument as last: `-aoOarg` (also `+aoOarg`)
    - `+` sets option to false / adds negative value (`+lll` â†’ logLvl+=-3) 
    - suffix:
      - `!`,`+`: required Ã— `?`,`*`: optional
      - `?`,`!`: single use Ã— `*`,`+`: multiple uses/values accepted
    - no `<>` â†’ toggles: `-o`/`--option` â†’ +1, `+o`/`--no-option` â†’ -1
    - type suffix `<>`: for opts requiring an arg
      - can act as a toggle if accepts '' as an arg
  positional params/arguments: name + suffix
    - order matters, next param is set when current arg does not match the previous one
    - suffix: `?`,`!`: single arg; `*`,`+`: list of values
    - use `--` to separate opts from args (no opts will be accepted after that)'

	[[ $default && ${#action[@]} -gt 9 ]]
	declare -i params=${params:-$?}

	echo 'Actions:'
	local act fmt
	((${SCRIPT_OPTS[color]})) && fmt='\033[1m%-*s   \033[0;4m%s\033[0m' || fmt='%-*s   %s'
	for act in "${action[@]}"; do
		[[ $act =~ ^-*([^-][^=]*)$ ]] && act=$(argToCase "${BASH_REMATCH[1]}")
		((${#act} == 1)) && act=${ACTION_INFO[$act]:-$act}
		if [[ ${ACTION_INFO[$act]} ]]; then
			printf "  $fmt\n" $ALIGNER "${ACTION_INFO[$act]%% *}" "${ACTION_INFO[$act]#* }"
			((params <= 0)) || paramHelp $act
		else
			echo "  No help for unknown action '$act'"
		fi
	done
}

actionInfo quit 'exit the tui' # also called when exiting the cli
quit() {
	${SSS_OPTS[exitFn]} 0 # override this for commit-before-exit
}

unknownParams=(received '$+' '.*' 'consumes all remaining args to end execution')
unknown() {
	log Warn " action '$received'!"
}

# Reads and sets matching value(s) from the user (all pickers must respect reg=$3)
pickAny() {
	if [[ $3 == '$'* ]]; then
		case "${3:1:1}" in
			e) pickFilesOrDir "$@" ;;
			d) pickDir "$@" ;;
			f) pickFile "$@" ;;
		esac
		return
	fi

	declare -ga $1
	declare -n _dst=$1
	while :; do
		local _pick=
		while [[ ! $_pick =~ ^$3$ ]]; do
			if ((${SCRIPT_OPTS[guiPicker]} > 0)); then
				_pick=$(rofi -dmenu -p "${_pick:+Argument has to match /$3/! }$4")
			else
				[[ $_pick ]] && echo "Argument has to match /$3/"
				read -rp "$4: " _pick
			fi
			[[ $_pick ]] || break
		done
		[[ $_pick ]] && _dst+=("$_pick")
		[[ $_pick && $2 == ?[+*] ]] || break
	done
}

pickDir() {
	local tmp=$(mktemp)
	ranger --choosedir="$tmp"
	if [[ -e $tmp ]]; then
		declare -n _choice=$1
		_choice="$(cat "$tmp")"
	fi
	rm "$tmp"
}

pickFile() {
	local tmp=$(mktemp)
	ranger --choosefile$([[ $2 == ?[+*] ]] && echo s)="$tmp"
	if [[ -e $tmp ]]; then
		mapfile -t $1 < "$tmp"
	fi
	rm "$tmp"
}

pickFilesOrDir() {
	[[ $2 == ?[+*] ]] && local _opts=(-m)
	_opts+=(--prompt "$4: " --preview 'ls {}')
	declare -n selected=$1
	local toView=(.)
	while :; do
		local f
		readarray -t _pick < <({
			echo '..'
			for f in "${toView[@]}"; do
				f=("$f"/*)
				printf '%s\n' "${f[@]}"
			done
		} | fzf "${_opts[@]}")

		if [[ -z $_pick ]]; then
			[[ -d $toView && $toView != '.' ]] && selected="$toView"
			break
		fi
		toView=()
		for f in "${_pick[@]}"; do
			if [[ -f $f ]]; then
				selected+=("$f")
			else
				toView+=("$f")
			fi
		done
		[[ ($selected && $2 != ?[+*]) || -z $toView ]] && break
	done
}

if [[ $0 == *sss ]]; then
	SSS_OPTS[about]='SSS - A script simplifying scripting
Provides automatized param handling, arg/opt parsing+autodoc.
Usage:
  1. Change SSS_OPTS to suit your script.
  2. Source this script: `. sss`
  3. Register your actions
    `actionInfo <fName> <shortName>? <shortHighlight>? <fDescription>`
  4. Declare action opts/args, see `help` for meanings
    `<fName>Params=(<varName> <shortOpt/argSuffix> <argRegex> <description>)`
  5. Declare a mapping of arg names to picker functions for user arg selection (TUI use)
    `declare -A <fName>Builder=([<argName>]=<picker/selector fName>)`
  6. Picker gets full arg quaternion, saves selection to $1/argName
  7. Write your function.
  8?. for execution after configuration overwrite SSS_OPTS[exitFn]
  9. Call `main "$@"` at the end of your script; set defAction for setup-then-exec use
There are a few predefined pickers and regexes you can use.'
	main "$@"
fi
