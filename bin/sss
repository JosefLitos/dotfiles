#!/usr/bin/bash

declare -A INFO=()
declare -a ORDER=()
ALIGNER=0

#######################################
# Register fn/action docs and for execution
# Arguments:
#   name: name of the function
#   key?: a unique one-letter shortcut for calling, or '' for no shortcut
#   helpsig?: function name displayed in help (with bracket-highlighted key)
#   help: help text
#######################################
actionInfo() {
	local name=$1 key helpsig help=${!#}
	(($# > 2)) && key=$2 || key=${name::1}
	if (($# > 3)); then
		helpsig=$3
	else
		[[ $key ]] && helpsig="[$key]${name:1}" || helpsig=$name
	fi
	[[ $key ]] && INFO[$key]="$name"
	((ALIGNER < ${#helpsig})) && ALIGNER=${#helpsig}
	INFO[$name]="$helpsig $help"
	ORDER+=($name)
}

# MODE: 1=CLI, 2=picker, 4=pick optional, 8=gui picker - XXX: pickers should respect gui option
declare -i MODE LOG_LVL=${LOG_LVL:-2} DRY_RUN=0
(($#)) && MODE=1 || MODE=2
declare -i FULL_LOG_NAMES=0 # script-level option
declare -A LOG_LEVELS=([quiet]=0 [err]=1 [error]=1 [warn]=2 [warning]=2 [info]=3 [debug]=4)
LOG_NAMES=(quiet err warn info debug)
LOG_FULL_NAMES=(quiet error warning info debug)
#######################################
# Print given message with context of current action and log level
# Arguments:
#   logLvl: one of ${!LOG_LEVELS[@]}, determines message importance
#   msg: message to print with context, ignored when LOG_LVL<logLvl
# Returns:
#   success when message was printed, exits if Warn in cli mode or Error are reported
#######################################
log() {
	local logLvl=${LOG_LEVELS[${1,}]}
	if ((LOG_LVL >= logLvl)); then
		((FULL_LOG_NAMES)) && local name=${LOG_FULL_NAMES[$logLvl]} || local name=${LOG_NAMES[$logLvl]}
		echo "${name^}: $action$2" 1>&2
	fi
	((!(MODE & 1) && logLvl > 1 || logLvl > 2)) || exit 1
	((LOG_LVL >= logLvl))
}

exec() {
	((LOG_LVL > 2)) && log Info "\$> $*"
	((DRY_RUN)) && return 0
	[[ ${!#} == \& ]] && { "${@:1:$((${#} - 1))}" & } || "$@"
}

actionInfo define D 'set script-processing options'
defineParams=( # TODO: consider a builtin way for +- toggle opts
	dry 'd' '' 'Disable actual commands execution'
	tui 't' '' 'Enter TUI mode after cli is parsed'
	pick 'p' '' 'Enable picker in cli'
	gui 'g' '' 'Enable gui picker'
	opt 'o' '' 'Enable picker for optional arguments'
	lvl 'l' '([0-9]+|[Ee]rr(or)?|[Ww]arn(ing)?|[Ii]nfo|[Dd]ebug)?'
	'Depth of logging (default=Warn=2), or multiple mentions for setting by count'
)
define() {
	((dry)) && { ((dry > 0)) && DRY_RUN=1 || DRY_RUN=0; }
	if ((MODE)); then
		((tui)) && { ((tui > 0)) && ((MODE &= -2)) || ((MODE |= 1)); }
		((pick)) && { ((pick > 0)) && ((MODE |= 2)) || ((MODE &= -3)); }
		((gui)) && { ((gui > 0)) && ((MODE |= 6)) || ((MODE &= -5)); }
		((opt)) && { ((opt > 0)) && ((MODE |= 8)) || ((MODE &= -9)); }
	fi
	if [[ $lvl ]]; then
		[[ $lvl == -* ]] && ((LOG_LVL += lvl)) || LOG_LVL=${LOG_LEVELS[${lvl^}]:-$lvl}
	fi
}

# script option for required option/action long name format
OPT_PREFIX_RE='-{,2}' # == '|-|--'; matched in a group → opt -opt --opt

main() {
	if ((MODE & 1)); then
		local CLI=1
		while (($#)); do
			parseAction "$@"
			shift $?
		done
		((MODE & 1)) && quit
		unset CLI
	fi
	while :; do
		if ((MODE & 4)); then
			read -rp 'Choose action (+opts): ' line
		else
			read -rp 'Choose action: ' -n 1 line
			echo
		fi
		if [[ ${line%% *} == ? || '-' =~ ^$OPT_PREFIX_RE$ ]]; then
			parseAction -$line
		elif [[ '--' =~ ^$OPT_PREFIX_RE$ ]]; then
			parseAction --$line
		else
			parseAction $line
		fi
		logLvl=100
	done
}

# set all required variables and call action
parseAction() {
	declare -i argc=$#
	# get action name
	if [[ $1 =~ ^($OPT_PREFIX_RE)([^-][^=]+)(=.*)?$ && ${INFO["${BASH_REMATCH[2]}"]} ]]; then
		local action=${BASH_REMATCH[2]} actionArg=${BASH_REMATCH[3]:1}
	elif [[ $1 =~ ^-([^-])(.*)$ ]]; then
		local action=${INFO[${1:1:1}]} actionArg=${BASH_REMATCH[2]:+-${BASH_REMATCH[2]}}
	fi
	if [[ $action ]]; then
		[[ $actionArg ]] && set -- "$actionArg" || shift
	else
		action=$DEFAULT_ACTION actionArg=
	fi

	declare -n sig=${action}Params
	declare -i sigN=${#sig[@]}
	local i # not declare -i to not preset default value to 0, for option handling

	# distinguish options and args
	declare -A opts=() # TODO: required options = name distinguished arguments (-i in ffmpeg)
	for ((i = 0; i < sigN; i += 4)); do
		local arg=${sig[i + 1]}
		if [[ $arg == [^?*.+] ]]; then
			opts["${sig[$i]}"]=$i
			opts["$arg"]=$i # shortopt, detected with '-' or '+' prefix
		elif [[ $arg ]]; then
			break
		fi
	done
	((LOG_LVL > 3)) && declare -p opts >&2

	declare -n builder=${action}Builder
	# get options
	while [[ $1 ]]; do
		# parse option prefix
		[[ $1 == -- ]] && shift && break
		local i= arg= optCnt=+
		if [[ $1 =~ ^($OPT_PREFIX_RE)([^-][^=]+)(=.+)?$ && -z $actionArg ]]; then # full option name
			i=${opts["${BASH_REMATCH[2]}"]}
			[[ $i ]] && arg=${BASH_REMATCH[3]:1}
		fi
		if [[ !$i && $1 =~ ^[+-]([^-+])(.+)?$ ]]; then # short option -o(Val)?
			[[ $1 == +* ]] && optCnt=-                    # +o means toggle off → -=
			i=${opts["${BASH_REMATCH[1]}"]}
			arg=${BASH_REMATCH[2]}
			while [[ $i && $arg ]]; do # -oooo toggle opts in succession
				local reg=${sig[i + 2]}
				if [[ $reg ]]; then # opt arg (last) or no arg required
					[[ '' =~ ^$reg$ ]] && ! argMatch "${arg:-$2}" || break
				fi
				declare -i ${sig[$i]//-/_}+=${optCnt}1 # preserve amount of that no-arg option's use
				i=${opts[${arg::1}]} arg=${arg:1}
			done
		fi
		[[ $i ]] && shift || break

		# parse option arg / set value
		local varName=${sig[$i]//-/_} reg=${sig[i + 2]}
		if [[ $reg ]]; then # requires arg
			if [[ $arg || $1 ]] && argMatch "${arg:-$1}"; then
				declare -a $varName
				declare -n varName
				varName+=("${arg:-$1}")
				declare +n varName
				[[ $arg ]] || shift
			elif [[ -z $arg && '' =~ ^$reg$ ]]; then # no arg, allows '' → number of uses as value
				declare -i $varName+=${optCnt}1
			else
				if ((MODE & 2)) && [[ -z $arg ]]; then
					if ((MODE & 8)); then # picker for optional
						declare -a $varName
						log Debug ".$varName = ${builder[$varName]:-pickAny}()"
						${builder[$varName]:-pickAny} "${sig[@]:i:4}"
					fi
				fi

				[[ -z ${!varName} ]] && log Err " - Option argument expected, got '${arg:-$1}':
$(paramHelp $action $((i / 4)))" && return
			fi
		else
			if [[ $arg ]]; then
				log Err " - Unexpected option argument '$arg':
$(paramHelp $action $((i / 4)))" && return
			else
				declare -i $varName+=${optCnt}1
			fi
		fi
	done
	((i = ${#opts[@]} * 2)) # * 4 fields in sig / 2 opts per option (varName + short)
	unset opts arg

	[[ $actionArg && $1 ]] && set -- "${1#-}"

	# get arguments
	for ((i; i < sigN; i += 4)); do
		local varName=${sig[$i]} sign=${sig[i + 1]} reg=${sig[i + 2]}
		if [[ $# -gt 0 ]] && argMatch "${1#$varName=}"; then
			if [[ $sign == [+*] ]]; then # param is a list
				declare -a $varName
				declare -n args=$varName
				while [[ $# -gt 0 ]] && argMatch "${1#$varName=}"; do
					args+=("${1#$varName=}")
					shift
				done
			else
				declare $varName="${1#$varName=}" # single argument expected
				shift
			fi
			continue
		else
			if ((MODE & 2)); then
				if ((MODE & 8)) || [[ $sign != [*?] ]]; then # picker for optional || arg required
					log Debug ".$varName = ${builder[$varName]:-pickAny}()"
					declare -a $varName # prepare variable as local
					${builder[$varName]:-pickAny} "${sig[@]:i:4}"
				fi
			fi
			if [[ ! ${!varName} && $sign != [*?] ]]; then
				log Err " - Argument expected:
$(paramHelp $action $((i / 4)))" && return
			fi
		fi
	done
	declare +n args builder
	unset args builder varName sign reg

	# ensure valid state
	if [[ $action == "$DEFAULT_ACTION" && $# -gt 0 && ! $DEFAULT_ACTION_REPEATABLE ]]; then
		log Err " - Default action must be used last, but was followed by: $*"
	fi
	[[ $actionArg && $# -eq 1 ]] && log Err " - Unexpected argument '$actionArg'"
	log Debug 'Params:' && for ((i = 0; i < sigN; i += 4)); do
		[[ ${!sig[$i]} ]] && declare -p ${sig[$i]} 1>&2
	done

	# cleanup and action call
	declare +n sig
	unset sig i sigN
	$action || log Warn ' failed!'
	local arg
	[[ $actionArg ]] && return 1 || return $((argc - $#))
}

declare -A REGEX=(
	[var]='[0-9A-Za-z_]+' [dashvar]='[0-9A-Za-z_\-]+' [const]='[0-9A-Z_]+'
	[domain]='[a-z0-9]+\.[0-9a-z.]+'
)

#######################################
# Test if $reg matches $1, or the rest after parsing $reg == \$o.*; o = bash condexpr operator
# example: reg='$f\.txt' → matches any existing file with 'txt' extension, '$F' for just filename
# Arguments:
#   tested: input argument to be tested against the pattern
#   reg: required format of the argument
#######################################
argMatch() {
	local reg=${reg:-$2}
	if [[ $reg == '$'* ]]; then
		if [[ ${reg:1:1} == [Ee] ]]; then # any dir or file with given pattern
			[[ -d $1 ]] && return 0
			[[ ${reg:1:1} == e ]] && reg="\$f${reg:2}" || reg="\$F${reg:2}"
		fi
		[[ $1 =~ ^[^-][^=]*${reg:2}$ ]] && {
			if [[ ${reg:1:1} == F ]]; then
				[[ ! -d $1 ]]
			else
				eval [[ -${reg:1:1} \$1 ]]
			fi
		}
	else
		[[ $1 =~ ^$reg$ ]]
	fi
}

#######################################
# Print help about specified parameter from given action.
# Globals:
#   matcher: boolean
# Arguments:
#   action: string
#   paramIdx?: integer
#######################################
paramHelp() {
	local action=$1
	declare -n sig=${action}Params
	[[ $2 ]] && declare -i i=$2*4 end=i+4 || declare -i i=0 end=${#sig[@]}
	while ((i < end)); do
		local varName=${sig[$i]} sign=${sig[i + 1]} regex=${sig[i + 2]} help=${sig[i + 3]}
		if [[ $sign == [^?*.+] ]]; then # option, not an arg
			varName+=[
			[[ $regex ]] && sign+=]* || sign+=]? # no regex → toggle option
		elif [[ -z $sign ]]; then
			varName+=[]
		fi
		[[ $matcher -gt 0 && $regex ]] && help="/$regex/ $help"
		printf '    %-*s%s\n' $((ALIGNER + 2)) "$varName$sign: " "$help"
		i+=4
	done
}

actionInfo help 'display this help'
helpParams=(
	legend 'l' '' 'Toggle legend for param notation (default=false)'
	matcher 'm' '' 'Toggle regex matching argument (default=false)'
	params 'p' '' 'Toggle params=opt+arg display (default=true)'
	actions '*' '[A-Za-z]+' 'Display help for action(s) (default=all)')
declare -A helpBuilder=([actions]=pickHelpAction)
pickHelpAction() {
	declare -n arr=$1
	arr=($(printf '%s\n' "${ORDER[@]}" | fzf -m --prompt="$4: "))
}
help() {
	if [[ ! $actions ]]; then
		declare -n actions=ORDER
		local default=true
		((MODE & 1)) && echo "$ABOUT"
	fi
	((legend > 0)) && echo 'Legend:
  action: [a]ction
    - short name usage: in brackets, existence is optional
      - prefix with `-`
      - value immediately after or as the next arg (-aVal / -a val)
    - full name usage: can help distinguish next action from previous argument list
      - prefix must match /'"${OPT_PREFIX_RE}"'/
      - value given with `=` or as the next arg (--act=val / --act val)
    - orderless (aside of repeated uses)
  option: OPTION[o]? option[o]*
    - like action, short name always appended in brackets (option[o])
    - ? suffix: no value - a toggle - `-o`=true, `+o`=false; chainable: `+oO`
    - * suffix: expects a value after the option, also a toggle if accepts empty string
      each mention is added to a corresponding array
  positional parameter: name name? name+ name*
    - internal var name displayed for better referencing, can be used to prefix args (arg=val)
    - order matters; matched with regexes - list ended by first unmatched
    - ./no suffix: required; 1 value
    - ? suffix: optional; 1 value
    - + suffix: required; 1+/list of values
    - * suffix: optional; 1+/list of values'

	[[ $default && ${#actions[@]} -gt 9 ]]
	declare -i params=${params:-$?}

	echo 'Actions:'
	local action
	for action in "${actions[@]}"; do
		((${#action} == 1)) && action=${INFO[$action]}
		printf '  %-*s  %s\n' $ALIGNER "${INFO[$action]%% *}" "${INFO[$action]#* }"
		((params <= 0)) || paramHelp $action
	done
}

actionInfo quit 'exit the tui'
quit() {
	if ((MODE & 1)); then # autocommit on the end of cli
		local runQueue=${INFO[commit]:-${INFO[run]:-${INFO[execute]}}}
		[[ $runQueue ]] && $runQueue
	fi
	exit 0
}

# script option, set to main registered action if script is a single app
# you can also make actions for one required arg, as a builder init,
# then actions with arg-specific opts, build complete by another init or default-act launch
# like: -builder init1 -o1 1 -o2 2 -builder init2 'default action arg'
DEFAULT_ACTION=unknown     # script option when no action can match the argument
DEFAULT_ACTION_REPEATABLE= # script option default action can be called multiple times
unknownParams=(received '+' '.*' '')
unknown() {
	log Err " action '$received'!"
}

# Reads and sets matching value(s) from the user (all pickers must respect reg=$3)
pickAny() {
	if [[ $3 == '$'* ]]; then
		case "${3:2:1}" in
			e) pickFilesOrDir "$@" ;;
			d) pickDir "$@" ;;
			f) pickFile "$@" ;;
		esac
		return
	fi
	declare -ga $1
	declare -n _dst=$1
	while :; do
		local _pick=
		while [[ ! $_pick =~ ^$3$ ]]; do
			[[ $_pick ]] && echo "Argument has to match /$3/"
			read -rp "$4: " _pick
			[[ $_pick ]] || break
		done
		[[ $_pick ]] && _dst+=("$_pick")
		[[ $_pick && $2 == [+*] ]] || break
	done
}

pickDir() {
	local tmp=$(mktemp)
	ranger --choosedir="$tmp"
	if [[ -e $tmp ]]; then
		declare -n _choice=$1
		_choice="$(cat "$tmp")"
	fi
	rm "$tmp"
}

pickFile() {
	local tmp=$(mktemp)
	ranger --choosefile$([[ $2 == [+*] ]] && echo s)="$tmp"
	if [[ -e $tmp ]]; then
		mapfile -t $1 < "$tmp"
	fi
	rm "$tmp"
}

pickFilesOrDir() {
	[[ $2 == [+*] ]] && local _opts=(-m)
	_opts+=(--prompt "$4: " --preview 'ls {}')
	declare -n selected=$1
	local toView=(.)
	while :; do
		local f
		readarray -t _pick < <({
			echo '..'
			for f in "${toView[@]}"; do
				f=("$f"/*)
				printf '%s\n' "${f[@]}"
			done
		} | fzf "${_opts[@]}")

		if [[ -z $_pick ]]; then
			[[ -d $toView && $toView != '.' ]] && selected="$toView"
			break
		fi
		toView=()
		for f in "${_pick[@]}"; do
			if [[ -f $f ]]; then
				selected+=("$f")
			else
				toView+=("$f")
			fi
		done
		[[ ($selected && $2 != [+*]) || -z $toView ]] && break
	done
}

if [[ ! $ABOUT ]]; then
	ABOUT='SSS - A script simplifying scripting
Provides automatized param handling, arg parsing and basic autodoc.
Usage:
  1. Set the `ABOUT` description to suit your script.
  2. Source this script: `. sss`
  3. Register your actions
    `actionInfo <fName> <shortName>? <shortHighlight>? <fDescription>`
  4. Declare action opts/args, see `help` for meanings
    `<fName>Params=(<varName> <shortOpt/argSuffix> <argRegex> <description>)`
  5. Declare a mapping of arg names to picker functions for user arg selection (TUI use)
    `declare -A <fName>Builder=([<argName>]=<picker/selector fName>)`
  6. Picker gets full arg quaternion, saves selection to $1/argName
  7. Write your function.
  8?. for execution after configuration write an `execute/exec/run` action (with no required args)
      it should only print commands intended for execution if `LOG_LVL>0`
  9. Call `main "$@"` at the end of your script; set DEFAULT_ACTION for single-script use
There are a few predefined pickers and regexes you can use.'
	main "$@"
fi
