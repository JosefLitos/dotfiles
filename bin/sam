#!/usr/bin/bash

. sss

SSS_OPTS[about]='SAM - System APK Manager
This program uses ADB to manage system applications on your Android phone.'

actionInfo connect 'connect to a device with given ip/port'
connectParams=(dst '!' '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+:)?[0-9]+' 'Port or ip:port')
connect() {
	[[ $dst != *:* ]] && dst=$(
		nmap -T4 -p$dst $(
			ip a | sed -nE 's,.*inet ((1[^2][^.]|12[^7]|[1-9][0-9])\.[0-9]+\.[0-9]+\.)[0-9]+/([0-9]+).*,\10/\3,p'
		) | grep -B4 '/tcp open' | sed -n 's,.*report for ,,p'
	):$dst
	exec adb connect $dst
}

actionInfo screen 'capture/share screen, sound and controls'
screenParams=(fps '?' '[0-9]+' 'Max framerate' extra '*' '.+' 'Extra params for `scrcpy`')
screen() {
	exec scrcpy "${extra[@]}" ${fps:+--max-fps $fps}
}

declare -A pkgConf=(
	[filter]=''
	[preview]='adb shell dumpsys package {} | grep ^Packages -A999 | grep ^Queries -B999')
actionInfo pkgconf C 'pkg[C]onf' 'set options for package picker'
pkgconfParams=(
	filter 'f?' '(-[edsu]( -[edsu])*)?' 'Default app picker filter (""/+f/-f for no filter)'
	preview 'p?' '.+' 'Command for fzf previewing')
pkgconf() {
	if [[ "$filter" ]]; then
		[[ ${filter:=1} =~ ^-?[0-9]+$ ]] && pkgConf[filter]='' || pkgConf[filter]=${filter}
	fi
	[[ ! $preview ]] || pkgConf[preview]="$preview"
}

pickPackage() {
	local _opts=(--prompt "$4: " --preview "${pkgConf[preview]}")
	[[ $2 == [+*] ]] && _opts+=(-m)
	local _filter=${pkgConf[$action]:-${pkgConf[filter]}}
	declare -n _choice=$1
	if [[ $_filter == *-u* ]]; then # filter only uninstalled pkgs
		local arr=()
		declare -A installed
		local pkg
		for pkg in $(adb shell pm list packages ${_filter/-u/} | sed 's/package://'); do installed[$pkg]=1; done

		for pkg in $(adb shell pm list packages $_filter | sed 's/package://'); do
			[[ ${installed[$pkg]} ]] || arr+=("$pkg")
		done
		readarray -t _choice < <(
			printf '%s\n' "${arr[@]}" | sort -r | fzf "${_opts[@]}"
		)
	else
		readarray -t _choice < <(
			adb shell pm list packages $_filter | sed 's/package://' | sort -r | fzf "${_opts[@]}"
		)
	fi
}

actionInfo disable 'disable installed apps'
disableParams=(packages '+' "${REGEX[domain]}" 'Domain name to disable')
declare -A disableBuilder=([packages]=pickPackage)
pkgConf+=([disable]=-e)
disable() {
	for package in "${packages[@]}"; do
		exec adb shell pm disable-user --user 0 "$package"
	done
}

actionInfo enable 'enable disabled apps'
enableParams=(packages '+' "${REGEX[domain]}" 'Domain name to enable')
declare -A enableBuilder=([packages]=pickPackage)
pkgConf+=([enable]=-d)
enable() {
	for package in "${packages[@]}"; do
		exec adb shell pm enable --user 0 $package
	done
}

actionInfo launch 'launch a package on the device'
launchParams=(package '!' "${REGEX[domain]}" 'Domain name to launch')
declare -A launchBuilder=([package]=pickPackage)
pkgConf+=([launch]=-e)
launch() {
	activity=$(adb shell dumpsys package |
		sed -n "s/^ \+[0-9a-f]\+ \($package\/[a-zA-Z.]\+\)$/\1/p" |
		fzf -m --prompt="activity: ")
	[[ $activity ]] && exec adb shell am start -n $activity
}

# Selectively uninstall every app onboard
# only disabled apps by default, -e for direct uninstallation (of active/enabled apps)
actionInfo uninstall 'uninstall disabled apps'
uninstallParams=(
	keep 'k?' 'Keep app data/cache'
	packages '+' "${REGEX[domain]}" 'Domain name to uninstall')
declare -A uninstallBuilder=([packages]=pickPackage)
pkgConf+=([uninstall]=-d)
uninstall() {
	local pkg cmd=(adb)
	((keep > 0)) && cmd+=(shell cmd package uninstall -k) || cmd+=(uninstall --user 0)
	for pkg in "${packages[@]}"; do
		exec "${cmd[@]}" "$pkg"
	done
}

actionInfo remove 'uninstall enabled apps'
removeParams=(
	keep 'k?' 'Keep app data/cache'
	packages '+' "${REGEX[domain]}" 'Domain name to uninstall')
declare -A removeBuilder=([packages]=pickPackage)
pkgConf+=([remove]=-e)
remove() {
	uninstall
}

# Installs selected system apps that were uninstalled
actionInfo reinstall i 're[i]nstall' 'reinstall uninstalled default apps'
reinstallParams=(packages '+' "${REGEX[domain]}" 'Domain name to reinstall')
declare -A reinstallBuilder=([packages]=pickPackage)
pkgConf+=([reinstall]='-s -u')
reinstall() {
	local pkg
	for pkg in "${packages[@]}"; do
		exec adb shell pm install-existing --user 0 $pkg
	done
}

main "$@"
