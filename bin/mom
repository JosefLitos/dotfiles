#!/usr/bin/bash

. sss

SSS_OPTS[about]='MOM - Media Operation/Manipulation
A collection of media operation/manipulation scripts.'

SCRIPT_OPTS[ffmpegSetLogLevel]=-2
defineParams=(
	ffmpegSetLogLevel 'f?' '' 'Change ffmpeg log level to current script value'
	"${defineParams[@]}")

ffmpegCmd() {
	((SCRIPT_OPTS[ffmpegSetLogLevel] > 0)) &&
		echo ffmpeg -v ${LOG_NAMES[${SCRIPT_OPTS[logLvl]}]/warn/warning} ||
		echo ffmpeg -v ${LOG_NAMES[$((-SCRIPT_OPTS[ffmpegSetLogLevel]))]/warn/warning}
}

actionInfo download 'download audio/video from given url with `yt-dlp`'
downloadParams=(
	metadata 'm?' '' 'Keep metadata' # NOTE: pipeline candidate - output as nometa src
	format 'f?' '.+' 'Yt-dl download format (default=ba[ext=webm])'
	src '$!' 'http.+' 'Url to download'
	dst '$?' '$E\.opus' 'Output filename in yt-dlp format or dir (default=./Artist - Song.opus)')
download() { # TODO: allow video; allow qual/fmt selection through a picker
	local cmd=(yt-dlp -N 8 -f "${format:-ba[ext=webm]}")
	local dst=${dst:-.}
	[[ -d $dst ]] && local tmp="%(creator)s - %(title)s.opus" || local tmp=${dst##*/}
	local prefix=/tmp/mom-download-
	cmd+=(-o "$prefix$tmp")
	cmd+=("${src%%&*}")

	((SCRIPT_OPTS[logLvl] < 3)) && cmd+=(-q)
	exec "${cmd[@]}" && {
		((metadata > 0)) && cmd=(exec mv) || cmd=(call noMeta +k)
		cmd+=("$prefix"*)
		[[ -d $dst ]] && cmd+=("${dst%/}/$(
			sed 's/\(.* -\) \1/\1/;s/^NA - //;s/ [([].*[])]//g' <<< "${cmd[${#cmd[@]} - 1]#$prefix}"
		)") || cmd+=("$dst")
		"${cmd[@]}"
	}
}

actionInfo noMeta M 'no-[M]eta' 'remove metadata from audio files'
noMetaParams=(
	keep 'k?' '' 'Keep original (default=remove $src)'
	src '$!' '$e\.(flac|wma|m4a|mp3|opus)' 'Audio file/dir to strip metadata from'
	dst '$?' '$E' 'Put results into (default=replace $src)')
noMeta() {
	if [[ -d $src ]]; then
		local CWD=$PWD
		cd "$src"
		for f in *; do
			[[ -d $f || $f =~ \.(flac|wma|m4a|mp3|opus)$ ]] || continue
			local src=$f
			noMeta
		done
		cd "$CWD"
	else
		[[ ${dst:-$src} == "$src" ]] && local dst=/tmp replaceSrc=$((1 - keep))

		[[ -d $dst ]] && local dst=$(getFreePath "${dst%/}/${src##*/}")
		local cmd=($(ffmpegCmd) -i "$src" -map_metadata -1 -map a -c copy "$dst")
		exec "${cmd[@]}" && {
			((replaceSrc > 0)) && exec mv "$dst" "$src" || ((keep > 0)) || exec rm "$src"
		}
	fi
}

pickTime() {
	if [[ ! -f $src ]]; then
		log Error ".$1 <pickTime>: \$src file must be set before picking a time"
		return 1
	fi

	local name=pickTime pick
	local pickFile="/tmp/$name.pick" pickerFile="/tmp/$name.lua"
	cat >> "$pickerFile" << lua
		require 'mp'

		local function divmod(a, b)
			return a / b, a % b
		end

		local function pickTime()
			local m, remainder = divmod(mp.get_property_number 'time-pos', 60)
			local h, m = divmod(m, 60)
			local s = math.floor(remainder)
			local ms = math.floor((remainder - s) * 1000)
			local time = string.format('%02d:%02d:%02d.%03d', h, m, s, ms)
			local f = io.open('/tmp/pickTime.pick', 'w')
			f:write(time)
			f:close()
			mp.commandv 'quit'
		end

		mp.add_key_binding("Enter", "pickTime", pickTime)
lua

	declare -n arr=$1
	local _opts=(--msg-level=cplayer=error --no-audio-display --loop-playlist --display-tags-clr
		--term-playing-msg="$(print "<Enter> to pick --$1") time for $(
			((SCRIPT_OPTS[color] > 0)) && ansi italic '${media-title}' reset || echo '${media-title}'
		)" --script="$pickerFile")
	local msg=
	for f in "${src[@]:${#arr[@]}}"; do
		echo > "$pickFile"
		mpv "${_opts[@]}" "$f" || return 1
		read -r pick < "$pickFile"
		arr+=("${pick:-0}")
	done
	declare +n arr

	rm "$pickerFile" "$pickFile"
}
timeToSeconds() {
	local str=${1#0}
	declare -i s=0
	while [[ $str == *:* ]]; do
		((s = s * 60 + ${str/:*/}))
		str=${str#*:}
		str=${str#0}
	done
	((s = s * 60 + ${str%.*}))
	[[ $str == *.* ]] && echo "$s.${str#*.}" || echo $s
}
secondsToTime() {
	[[ $1 == *.* ]] && local str=.${1#*.} || local str
	declare -i s=${1%.*}
	str=$((s % 60))$str
	while ((0 < (s = s / 60))); do
		str=$((s % 60)):$str
	done
	echo "$str"
}

getFreePath() {
	[[ ! -e $1 ]] && echo "$1" && return
	[[ $1 =~ ([0-9]*)(\.[^.]+)$ ]]
	local name=${1::-${#BASH_REMATCH[0]}} ext=${BASH_REMATCH[2]}
	declare -i n=${BASH_REMATCH[1]:-0}+1
	[[ ${BASH_REMATCH[1]} ]] || name+=_
	while [[ -e $name$n$ext ]]; do
		((n++))
	done
	echo "$name$n$ext"
}

actionInfo edit 'cut, strip metadata and/or convert media; time picker works only after `src`'
declare -A editBuilder=([fadeout]=pickTime [start]=pickTime [end]=pickTime)
editParams=(
	copy 'c?' '' 'Copy, otherwise convert to opus (disables -bvf, default=false)'
	metadata 'm?' '' 'Keep metadata (default=false)'
	keepOriginal 'k?' '' 'Keep $src file (removes by default)'
	bitrate 'b*' '[0-9]+' 'Output bitrate in kbps (default=96 for <=192kbps, else 128)'
	volume 'v*' '[0-9]+(\.[0-9]+)?' 'Volume multiplier (default=1)'
	src '$+' '$f\.(flac|mp3|m4a|wma|opus)' 'File to cut/convert'
	start 's*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'Start time (default=0)'
	end 'e*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'End time, or seconds from the end (default=0)'
	fadeout 'f*' '[0-9]+(:[0-9]+)*(\.[0-9]+)?' 'Fadeout start time, or seconds from the end'
	fadeoutPadding 'p?' '[0-9]+(\.[0-9]+)?' 'Shorten fadeout to fit this much silence (default=3)'
	dst '$?' '$E\.opus' 'Output file/dir (default=`$src.opus`, deletes `$src`)')
edit() {
	if argMatch "$dst" '$F\.opus' && [[ ${#src[@]} -gt 1 ]]; then
		log Warn ': cannot specify multiple $src and a file $dst'
		return 1
	fi

	local f out
	local baseCmd=($(ffmpegCmd) -i '' -map a)
	declare -i i=${#src[@]} fP=${fadeoutPadding:-3} fileArgPos=${#baseCmd[@]}-3
	((metadata <= 0)) && baseCmd+=(-map_metadata -1)
	((copy > 0)) && local volume=() fadeout=() baseCmd+=(-c copy)

	while ((--i >= 0)); do
		local f=${src[i]}
		local cmd=("${baseCmd[@]}")
		cmd[$fileArgPos]=$f

		((copy > 0)) || {
			local b=${bitrate[i]:-$bitrate}
			if [[ -z $b ]]; then
				local fileBitrate=$(ffprobe "$f" |& sed -n 's/.*bitrate: \([0-9]\+\) .*/\1/p')
				[[ $f == *.opus ]] && b=$fileBitrate || {
					[[ $src =~ \.(flac|wav)$ || $fileBitrate > 192 ]] && b=128 || b=96
				}
				log Verbose "['${f/*\//…/}'].bitrate = $b"
			fi
			local cmd+=(-b:a ${b}k) cmdBrTo=${#cmd[@]}
		}

		local v=${volume[i]:-${volume:-1}}
		[[ $v != 1 ]] && cmd+=(-filter:a volume=$v)

		local s=${start[i]:-0}
		[[ $s != 0 ]] && cmd+=(-ss $s)

		local e=${end[i]:-0} endSeconds
		local fade=${fadeout[i]:-${fadeout:-0}}
		if [[ $e != 0 || $fade != 0 ]]; then
			if [[ $e != *:* ]]; then
				endSeconds=$(bc <<< "$(timeToSeconds $(
					ffprobe "$f" |& sed -n 's/.*Duration: \([^,]*\),.*/\1/p'
				))-$e")
				e=$(secondsToTime $endSeconds)
			else
				endSeconds=$(timeToSeconds $e)
			fi
			cmd+=(-to $e)

			if [[ $fade != 0 ]]; then
				if [[ $fade != *:* ]]; then
					cmd+=(-af afade=out:st=$(bc <<< "$endSeconds-$fade"):d=$(bc <<< "$fade-$fP"))
				else
					fade=$(timeToSeconds $fade)
					cmd+=(-af afade=out:st=$fade:d=$(bc <<< "$endSeconds-$fade-$fP"))
				fi
			fi
		fi

		[[ -d $dst ]] && out="$dst/${f##*/}" || { [[ $dst ]] && out=$dst || out=$f; }
		if [[ -d ${dst:-.} ]]; then
			((copy > 0)) || {
				[[ $out == *.opus && $v == 1 && $f == 0 ]] && cmd=("${cmd[@]::cmdBrTo-2} ${cmd[@]:cmdBrTo}")
				out=${out%.*}.opus
			}
			out=$(getFreePath "$out")
			log Verbose "['${src/*\//…/}'].dst = '$out'"
		fi
		exec "${cmd[@]}" "$out" && { ((keepOriginal > 0)) || exec rm "$f"; }
	done
}

actionInfo subtitles 'convert mp4 with srt to mkv'
subtitlesParams=(
	keepSrc 'k?' '' 'Keep used files (default=false, true for mkv for potential subtitle fail)'
	clearSrcSubs 'c?' '' 'Purge original video subtitles - enable if added are not visible'
	updateDefault 'd?' '' 'Change default subs to the first ones added (default=true)'
	lang 'l*' '[a-z]+' 'Languages in order of provided subtitles (default={name}.srt|eng per sub)'
	# encoding '-e' "${REGEX[dashvar]}" 'wanted final encoding (requires `enca`; default=UTF-8)'
	subs '$*' '$f\.srt' 'Subtitles to add (default=*.srt)'
	vid '$?' '$f\.(mp4|mkv)' 'Source video file (default=first of `*.mp4`,`*.mkv`)'
	dst '$?' '$F\.mkv' 'Output file (default=`$vid.mkv`)')
# subtitle format from windows transcoding using `enca` package
subtitles() {
	if [[ -z $subs ]]; then
		local subs=(*.srt)
		if [[ $vid && ${#subs[@]} -gt 1 ]]; then
			local match=${vid@L}
			match=${match%.*}.srt
			subs=()
			for f in *.srt; do
				[[ ${f@L} == "$match" ]] && local subs=$f && break
			done
		fi
		if [[ -z $subs ]]; then
			log Warn " - no match for '$match'"
			return 1
		fi
	fi

	[[ $vid == *.mkv && ! -f $vid && -z $dst ]] && local dst=$vid && vid=
	if [[ -z $vid ]]; then
		local vid=(*.mp4)
		if [[ ${#vid[@]} -ne 1 ]]; then
			local match=${subs@L}
			match=${match%.*}.
			vid=()
			for f in *.mp4 *.mkv; do
				[[ ${f@L} == "$match"* ]] && local vid=$f && break
			done
		fi
		if [[ -z $vid ]]; then
			log Warn " - no match for '$match'"
			return 1
		fi
	fi

	# [[ $encoding ]] || local encoding=UTF-8
	local cmd=($(ffmpegCmd))

	local sub i len=${#subs[@]}
	for sub in "${subs[@]}"; do
		# if [[ $(file "$sub" -b) =~ ([^ ]+)\ text && ${BASH_REMATCH[1]} != $encoding ]]; then
		# enca "$sub" -x "$encoding"
		# fi
		cmd+=(-i "$sub")
	done
	cmd+=(-i "$vid" -map $len:a -map $len:v -c copy)
	((clearSrcSubs < 0)) && ffprobe "$vid" |& grep Subtitle &> /dev/null && cmd+=(-map $len:s)

	[[ $lang ]] || local lang=()
	for ((i = 0; i < len; i++)); do
		if [[ -z ${lang[i]} ]]; then
			sub=${subs[i]##*/}
			[[ $sub == [a-z][a-z][a-z].srt ]] && lang[i]=${sub%.srt} || lang[i]=eng
			log Info "['${subs[i]/*\/.../}'].lang = ${lang[i]}"
		fi
		cmd+=(-metadata:s:s:$i language=${lang[i]} -map $i)
	done

	((updateDefault >= 0)) && cmd+=(-disposition:s:0 default)
	if [[ -z $dst ]]; then
		local dst=${vid%.*}.mkv
		[[ -f $dst ]] && dst="${vid%.*} $lang-sub.mkv"
	fi
	local tmp="/tmp/mom-${dst##*/}"
	cmd+=("$tmp")

	[[ ${vid} == *.mkv ]] && local keepSrc=1
	exec "${cmd[@]}" && exec mv "$tmp" "$dst" && if ((keepSrc <= 0)); then
		exec rm "${subs[@]}" "$vid"
	fi
}

actionInfo play 'select and play a song/dir using mpv'
playParams=(
	NO_LOOP 'L?' '' 'Do not loop playlist'
	randomizer 'r?' '(a([0-9]*)s?|d([0-9]*)(:[0-9]+)?s?)?'
	'(default=1=mpv --shuffle); a<f>= <f> picks per artist/final dir;
	      d<n>:<f>= <n> final dir picks, <f> picks per dir, *`s` for --shuffle after picks'
	src '$!' '$e' 'Play file/dir')
declare -A playBuilder=([src]=pickSong)
pickSong() {
	declare -n _choice=$1
	_choice="$({
		find ~/Music/* -type d
		find ~/Music/Songs -type f
	} | rofi -dmenu -i -p "$4" -theme-str 'window {width: 50%;}')"
}
play() {
	local playlistFile=/tmp/my/song
	local cmd=(mpv --no-audio-display --no-terminal --playlist=$playlistFile)
	((NO_LOOP > 0)) || cmd+=(--loop-playlist)
	exec pkill -f "${cmd[*]::2}"

	if [[ -f $src ]]; then
		exec echo "$src" \> "$playlistFile"
		cmd+=(--playlist-start=0)
		src=${src%/*}
	elif [[ -f $playlistFile ]]; then
		exec rm "$playlistFile"
	fi

	if [[ $randomizer == [da]* ]]; then
		local allDirs=() artistDirs=() d f
		readarray -t allDirs < <(fd '' -Lt d "$src")
		for d in "${allDirs[@]}"; do # filter out dirs with no files
			local contents=("$d"/*)
			for f in "${contents[@]}"; do
				[[ -f $f ]] && artistDirs+=("$d") && break
			done
		done
		unset allDirs

		pickFromDir() {
			((perDir >= $#)) && echo "$@" | exec sort -R \>\> "$playlistFile" && return
			declare -i cnt=$perDir pick
			while ((cnt--)); do
				((pick = RANDOM % $#))
				if [[ $(file -b --mime-type "${!pick}") == audio/* ]]; then
					exec echo "${!pick}" \>\> "$playlistFile"
				else
					((cnt++))
				fi
			done
		}

		if ((!${#artistDirs[@]})); then
			exec echo "$src" \>\> "$playlistFile"
		elif [[ $randomizer == d* ]]; then
			[[ $randomizer =~ ^d([0-9]*)(:([0-9]+))?s?$ ]]
			declare -i fileCnt=${#artistDirs[@]} n=${BASH_REMATCH[1]:-1} perDir=${BASH_REMATCH[3]:-1}
			while ((n-- > 0)); do
				pickFromDir "${artistDirs[RANDOM % len]%/}"/*
			done
		else # randomizer == a*
			[[ $randomizer =~ ^a([0-9]*)s?$ ]]
			declare -i perDir=${BASH_REMATCH[1]:-1}
			for d in "${artistDirs[@]}"; do
				pickFromDir "${d%/}"/*
			done
		fi
		[[ $randomizer == *s ]] && cmd+=(--shuffle)
	else
		exec echo "$src" \>\> "$playlistFile"
		((randomizer >= 0)) && cmd+=(--shuffle)
	fi

	exec "${cmd[@]}" \&
	sleep 1 && exec rm "$playlistFile"
	return 0
}

actionInfo compare C "play randomized files and reveal user's pick"
compareParams=(files '$+' '$f' 'Files to compare')
compare() {
	declare -i c=${#files[@]}*${#files[@]}+1 i j
	for i in ${!files[@]}; do # absolute path for `ln -s`
		[[ ${files[$i]} == /* ]] || files[$i]="$PWD/${files[$i]}"
	done
	while ((c-- > 0)); do
		i=$RANDOM%${#files[@]}
		j=$RANDOM%${#files[@]}
		if ((i != j)); then
			x=${files[$i]}
			files[i]=${files[$j]}
			files[j]=$x
		fi
	done

	for i in ${!files[@]}; do
		exec ln -sf "${files[$i]}" /tmp/mediacmp$((i + 1))
		exec ${TERMINAL:-xterm} echo $((i + 1))\; mpv --no-audio-display /tmp/mediacmp$((i + 1)) &
		sleep 1
	done
	read -p "pick [1-${#files[@]}]: " best
	declare -i best=($best)
	for i in ${best[@]}; do
		echo "${files[$((i - 1))]#$PWD/}"
	done
	declare -i i=${#files[@]}
	while ((--i)); do
		exec rm /tmp/mediacmp$i
	done
}

actionInfo linkFix 'fix symlinked files - find new paths, allowing slightly modified names+ft'
linkFixParams=(
	dst 'd?' '$d' 'Dir with broken links (default=./)'
	resources '$!' '$d' 'Dir with reference files')
linkFix() {
	[[ $dst ]] && dst=${dst%/}/ || local dst=${dst:-./}
	local CWD=$PWD
	cd "$dst"
	local f
	while read f; do
		if [[ ! -f $f ]]; then
			local name=${f##*[-/]}
			local all="" found=
			while read found; do
				if ((${#all} && ${#all} < ${#found})); then
					log Warn ": unused match '$found' to '$f'"
				else
					all=$found
				fi
			done < <(fd -t f "${name%.*}" "$dir")
			if [[ $all ]]; then
				exec rm "$f"
				exec ln -s "$all" "${f%.*}.${all##*.}"
			else
				log Warn ": unmatched $f"
			fi
		fi
	done < <(fd -t l)
	cd "$CWD"
}

main "$@" # TODO: default action that determines the right action to give the argument(s) to
