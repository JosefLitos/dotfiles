#!/usr/bin/bash

. sss

SCRIPT_OPTS[about]='MOM - Media Operation/Manipulation
A collection of media operation/manipulation scripts.'

actionInfo download 'download audio/video from given url with `yt-dlp`'
downloadParams=(
	metadata 'm?' '' 'keep metadata' # NOTE: pipeline candidate - output as nometa src
	format 'f?' '.+' 'yt-dl download format (default=ba[ext=webm])'
	src '!' 'http.+' 'url to download'
	dst '?' '$E\.opus' 'output filename in yt-dlp format or dir (default=./Artist - Song.opus)')
download() { # TODO: allow video; allow qual/fmt selection through a picker
	local cmd=(yt-dlp -N 8 -f "${format:-ba[ext=webm]}")
	local dst=${dst:-.}
	[[ -d $dst ]] && local tmp="%(creator)s - %(title)s.opus" || local tmp=${dst##*/}
	local prefix=/tmp/mom-download-
	cmd+=(-o "$prefix$tmp")
	cmd+=("${src%%&*}")

	((SSS_OPTS[log] < 3)) && cmd+=(-q)
	exec "${cmd[@]}" && {
		((metadata > 0)) && cmd=(exec mv) || cmd=(call nometa +k)
		cmd+=("$prefix"*)
		[[ -d $dst ]] && cmd+=("${dst%/}/$(
			sed 's/\(.* -\) \1/\1/;s/^NA - //;s/ [([].*[])]//g' <<< "${cmd[${#cmd[@]} - 1]#$prefix}"
		)") || cmd+=("$dst")
		"${cmd[@]}"
	}
}

actionInfo nometa M 'no[M]eta' 'remove metadata from audio files'
nometaParams=(
	keep 'k?' '' 'keep original (default=remove original)'
	src '!' '$e\.(flac|wma|m4a|mp3|opus)' 'Audio file/dir to strip metadata from'
	dst '?' '$E' 'Put results into (default=replace original)')
nometa() {
	if [[ -d $src ]]; then
		local CWD=$PWD
		cd "$src"
		for f in *; do
			[[ -d $f || $f =~ \.(flac|wma|m4a|mp3|opus)$ ]] || continue
			local src=$f
			nometa
		done
		cd "$CWD"
	else
		[[ ${dst:-$src} == $src ]] && local dst=/tmp/ defaultDst=true

		[[ -d $dst ]] && local dst=${dst%/}/${src##*/}
		local cmd=(ffmpeg -i "$src" -map_metadata -1 -map a -c copy "$dst" -v)
		cmd+=(${LOG_NAMES[${SSS_OPTS[log]}]/warn/warning})
		exec "${cmd[@]}" && {
			[[ $defaultDst ]] && exec mv "$dst" "$src" || { ((keep > 0)) || rm "$src"; }
		}
	fi
}

# TODO: make as option before conversion / make a cmd pipeline, not a separate command â†’ compose
# scripts to generate options
# Do as batch operations - option for loading input/output
# option for additional options / envvars
# cut() {

# }

actionInfo convert 'convert audio files to opus'
convertParams=( # TODO: opt for ignoring low qual mp3
	NO_RM 'R?' '' 'Prevent source file removal'
	bitrate 'b?' '[0-9]+' 'Output bitrate in kbps (default=96)'
	src '+' '$f\.(flac|wma|m4a|mp3)' 'File to convert'
	dst '?' '$E\.opus' 'Output file/dir (default=`$src.opus`, deletes `$src`)')
convert() {
	[[ $bitrate ]] ||
		[[ $f =~ \.(flac|wav)$ || $(
			ffprobe "$f" |& sed -n 's/.*bitrate: \([0-9]\+\) .*/\1/p'
		) > 192 ]] && local brate=128 || local bitrate=96
	argMatch "$dst" '$F\.opus' && [[ ${#src[@]} -gt 1 ]] &&
		log Warning ': cannot specify multiple src and a file dst'

	[[ -z $dst ]] || local NO_RM=1 dst=${dst%/}
	local f out
	for f in "${src[@]}"; do
		[[ -d $dst ]] && out="$dst/${f##*/}" || { [[ $dst ]] && out=$dst || out=$f; }
		local cmd=(ffmpeg -i "$f" -map_metadata -1 -map a -b:a ${bitrate}k "${out%.*}.opus" -v)
		cmd+=(${LOG_NAMES[${SSS_OPTS[log]}]/warn/warning})
		exec "${cmd[@]}" && { ((NO_RM > 0)) || exec rm "$f"; }
	done
}

actionInfo subtitles 'convert mp4 with srt to mkv'
subtitlesParams=(
	NO_RM 'R?' '' 'Prevent source file removal (enabled for mkv for potential subtitle fail)'
	NO_SRC_SUBS 'S?' '' 'Do not keep source subtitles - can help if added are not visible'
	NO_DEF_CHANGE 'D?' '' 'Prevent default-subs change (changes to first subs by default)'
	lang 'l*' '[a-z]+' 'Languages in order of provided subtitles (default=eng)'
	# encoding '-e' "${REGEX[dashvar]}" 'wanted final encoding (requires `enca`; default=UTF-8)'
	subs '*' '$f\.srt' 'Subtitles to add (default=*.srt)'
	vid '?' '$f\.(mp4|mkv)' 'Source video file (default=first of `*.mp4`,`*.mkv`)'
	dst '?' '$F\.mkv' 'Output file (default=`$vid.mkv`)')
# subtitle format from windows transcoding using `enca` package
subtitles() {
	if [[ -z $subs ]]; then
		local subs=(*.srt)
		if [[ $vid && ${#subs[@]} -gt 1 ]]; then
			local match=${vid@L}
			match=${match%.*}.srt
			subs=()
			for f in *.srt; do
				[[ ${f@L} == "$match" ]] && local subs=$f && break
			done
		fi
		[[ -z $subs ]] && log Error " - no match for '$match'" && return
	fi

	[[ $vid == *.mkv && ! -f $vid && -z $dst ]] && local dst=$vid && vid=
	if [[ -z $vid ]]; then
		local vid=(*.mp4)
		if [[ ${#vid[@]} -ne 1 ]]; then
			local match=${subs@L}
			match=${match%.*}.
			vid=()
			for f in *.mp4 *.mkv; do
				[[ ${f@L} == "$match"* ]] && local vid=$f && break
			done
		fi
		[[ -z $vid ]] && log Error " - no match for '$match'" && return
	fi

	[[ $lang ]] || local lang=eng
	# [[ $encoding ]] || local encoding=UTF-8
	local opts=(-v)
	opts+=(${LOG_NAMES[${SSS_OPTS[log]}]/warn/warning})

	declare -i i=0
	for sub in "${subs[@]}"; do
		# if [[ $(file "$sub" -b) =~ ([^ ]+)\ text && ${BASH_REMATCH[1]} != $encoding ]]; then
		# enca "$sub" -x "$encoding"
		# fi
		opts+=(-i "$sub")
	done
	opts+=(-i "$vid" -map ${#subs[@]}:a -map ${#subs[@]}:v -c copy)
	((NO_SRC_SUBS <= 0)) && ffprobe "$vid" |& grep Subtitle &> /dev/null && opts+=(-map ${#subs[@]}:s)

	declare -i i=0
	for sub in "${subs[@]}"; do
		[[ ${lang[$i]} ]] && opts+=(-metadata:s:s:$i language=${lang[$i]})
		opts+=(-map $i)
		i+=1
	done

	((NO_DEF_CHANGE > 0)) || opts+=(-disposition:s:0 default)
	if [[ -z $dst ]]; then
		local dst=${vid%.*}.mkv
		[[ -f $dst ]] && dst="${vid%.*} $lang-sub.mkv"
	fi
	opts+=("/tmp/${dst##*/}")

	[[ ${vid} == *.mkv ]] && local NO_RM=1
	exec ffmpeg "${opts[@]}" && exec mv "/tmp/${dst##*/}" "$dst" && if [[ $NO_RM -le 0 ]]; then
		exec rm "${subs[@]}" "$vid"
	fi
}

actionInfo play 'select and play a song/dir using mpv'
playParams=(
	NO_LOOP 'L?' '' 'Do not loop playlist'
	randomizer 'r?' 'o?' '+r=disable; -r=enable (default); o=once, then just play'
	src '!' '$e' 'Play file/dir')
declare -A playBuilder=([src]=pickSong)
pickSong() {
	declare -n _choice=$1
	_choice="$({
		find ~/Music/* -type d
		find ~/Music/Songs -type f
	} | rofi -dmenu -i -p "$4" -theme-str 'window {width: 50%;}')"
}
play() {
	local playlistFile=/tmp/my/song
	local cmd=(mpv --no-audio-display --no-terminal --playlist=$playlistFile)
	((NO_LOOP > 0)) || cmd+=(--loop-playlist)
	pkill -f "${cmd[*]::2}"

	if [[ -f $src ]]; then # TODO: improve way of exec to actually not write to the file
		exec echo "$src" > $playlistFile
		cmd+=(--playlist-start=0)
		src=${src%/*}
	elif [[ -f $playlistFile ]]; then
		exec rm "$playlistFile"
	fi

	if [[ $randomizer == o ]]; then
		exec fd '' -t f "$src" | sort -R >> "$playlistFile"
	else
		exec echo "$src" >> "$playlistFile"
		((randomizer >= 0)) && cmd+=(--shuffle)
	fi

	exec "${cmd[@]}" \&
	sleep 1 && exec rm "$playlistFile"
	return 0
}

actionInfo compare C "play randomized files and reveal user's pick"
compareParams=(files '+' '$f' 'Files to compare')
compare() {
	declare -i c=${#files[@]}*${#files[@]}+1 i j
	for i in ${!files[@]}; do # absolute path for `ln -s`
		[[ ${files[$i]} == /* ]] || files[$i]="$PWD/${files[$i]}"
	done
	while ((c-- > 0)); do
		i=$RANDOM%${#files[@]}
		j=$RANDOM%${#files[@]}
		if ((i != j)); then
			x=${files[$i]}
			files[i]=${files[$j]}
			files[j]=$x
		fi
	done

	for i in ${!files[@]}; do
		exec ln -sf "${files[$i]}" /tmp/mediacmp$((i + 1))
		exec ${TERMINAL:-xterm} echo $((i + 1))\; mpv --no-audio-display /tmp/mediacmp$((i + 1)) &
		sleep 1
	done
	read -p "pick [1-${#files[@]}]: " best
	declare -i best=($best)
	for i in ${best[@]}; do
		echo "${files[$((i - 1))]#$PWD/}"
	done
	declare -i i=${#files[@]}
	while ((--i)); do
		exec rm /tmp/mediacmp$i
	done
}

main "$@" # TODO: default action that determines the right action to give the argument(s) to
