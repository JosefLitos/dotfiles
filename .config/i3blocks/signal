#!/usr/bin/bash
#Signal managing script for statusbar

case "$1" in
	"vol")
		read -ra WP < /tmp/my/wp
		if [[ $2 == toggle ]]; then
			wpctl set-mute ${WP[0]} "$2"
		else
			wpctl set-volume ${WP[0]} "$2"
		fi
		pkill -RTMIN+10 i3blocks
		;;
	"mic")
		read -ra WP < /tmp/my/wp
		if [[ $2 == toggle ]]; then
			wpctl set-mute ${WP[1]} "$2"
		else
			wpctl set-volume ${WP[1]} "$2"
		fi
		pkill -RTMIN+13 i3blocks
		;;
	"light")
		light=$(backlight "$2" "$3")
		notify-send -a signal -h int:value:$light -h string:synchronous:light " $light%"
		pkill -RTMIN+11 i3blocks
		;;
	"kb")
		swaymsg -t get_inputs -p | grep -q \(US\) -m 1 && kb=cz || kb=us
		swaymsg input type:keyboard xkb_switch_layout next
		notify-send -a signal -h string:synchronous:kb " $kb"
		pkill -RTMIN+12 i3blocks
		;;
	"wp")
		declare -A sinks sources def
		declare -i attempts=5
		while :; do
			{
				while read -r line; do
					[[ -z $line ]] && break
					[[ ${line:3} =~ ^(\*)?\ +([0-9]+)\.\ ([^ ]+(\ [^ ]+)*) ]]
					sinks["${BASH_REMATCH[3]}"]="${BASH_REMATCH[2]};${BASH_REMATCH[1]}"
					if [[ ${BASH_REMATCH[1]} == \* ]]; then
						def[sink]=${BASH_REMATCH[2]}
						def[sinkName]=${BASH_REMATCH[3]}
					fi
				done
				while read -r line; do
					[[ ${line:3} =~ ^(\*)?\ +([0-9]+)\.\ ([^ ]+(\ [^ ]+)*) ]]
					sources["${BASH_REMATCH[3]}"]="${BASH_REMATCH[2]};${BASH_REMATCH[1]}"
					if [[ ${BASH_REMATCH[1]} == \* ]]; then
						def[source]=${BASH_REMATCH[2]}
						def[sourceName]=${BASH_REMATCH[3]}
					fi
				done
			} < <(wpctl status | awk '/Sink endpoints:$/{p=0;print ""};/Source endpoints:$/{exit};
p==1 && /^ │  .+/{print};/S(ink|ource)s:/{p=1}')
			((${def[sink]} || (attempts -= 1) > 0)) && break || sleep 1
		done

		if [[ $2 != detect ]]; then
			[[ $2 ]] && glob=$2 || glob=$(printf '%s\n' "${!sinks[@]}" "${!sources[@]}" |
				rofi -dmenu -i -p 'Set default:')
			[[ $glob == *\* ]] || glob="${glob%% *}*"

			for k in "${!sinks[@]}"; do
				[[ $k == $glob ]] && def[sink]=${sinks["$k"]%;*} def[sinkName]=$k && break
			done
			for k in "${!sources[@]}"; do
				[[ $k == $glob ]] && def[source]=${sources["$k"]%;*} def[sourceName]=$k && break
			done
		fi

		msg="Sink: ${def[sinkName]}\nSource: ${def[sourceName]}"

		if [[ -z ${def[sink]} || -z ${def[source]} ]]; then
			notify-send -u critical -t 2000 'Audio Err' "$msg"
			exit 1
		fi

		notify-send -t 1500 "Audio ${glob:-default}" "$msg"
		wpctl set-default ${def[sink]}
		wpctl set-default ${def[source]}
		if [[ ${def[sinkName]} == Echo* ]]; then
			for k in "${!sinks[@]}"; do
				[[ $k == Builtin* ]] && def[sink]=${sinks["$k"]%;*} && break
			done
			for k in "${!sources[@]}"; do
				[[ $k == Builtin* ]] && def[source]=${sources["$k"]%;*} && break
			done
		fi
		echo "${def[sink]} ${def[source]}" > /tmp/my/wp
		pkill -RTMIN+10 i3blocks && pkill -RTMIN+13 i3blocks
		;;
	"theme") ~/.config/i3blocks/clock toggle ;;
esac
